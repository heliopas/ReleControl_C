
SetReleActive.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00000642  000006d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000642  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000104  0080011a  0080011a  000006f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000720  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000760  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d67  00000000  00000000  000007d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000087e  00000000  00000000  0000253f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000088b  00000000  00000000  00002dbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000120  00000000  00000000  00003648  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004fd  00000000  00000000  00003768  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000900  00000000  00000000  00003c65  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00004565  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  48:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__vector_18>
  4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  50:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <__vector_20>
  54:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  68:	e0 00       	.word	0x00e0	; ????
  6a:	f2 00       	.word	0x00f2	; ????
  6c:	04 01       	movw	r0, r8
  6e:	16 01       	movw	r2, r12
  70:	28 01       	movw	r4, r16
  72:	3a 01       	movw	r6, r20
  74:	4c 01       	movw	r8, r24
  76:	5e 01       	movw	r10, r28
  78:	70 01       	movw	r14, r0
  7a:	82 01       	movw	r16, r4
  7c:	94 01       	movw	r18, r8
  7e:	a6 01       	movw	r20, r12
  80:	b8 01       	movw	r22, r16
  82:	ca 01       	movw	r24, r20
  84:	dc 01       	movw	r26, r24
  86:	ee 01       	movw	r28, r28
  88:	00 02       	muls	r16, r16
  8a:	12 02       	muls	r17, r18

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d4 e0       	ldi	r29, 0x04	; 4
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e4       	ldi	r30, 0x42	; 66
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
  a4:	05 90       	lpm	r0, Z+
  a6:	0d 92       	st	X+, r0
  a8:	aa 31       	cpi	r26, 0x1A	; 26
  aa:	b1 07       	cpc	r27, r17
  ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
  ae:	22 e0       	ldi	r18, 0x02	; 2
  b0:	aa e1       	ldi	r26, 0x1A	; 26
  b2:	b1 e0       	ldi	r27, 0x01	; 1
  b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
  b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
  b8:	ae 31       	cpi	r26, 0x1E	; 30
  ba:	b2 07       	cpc	r27, r18
  bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
  be:	0e 94 28 02 	call	0x450	; 0x450 <main>
  c2:	0c 94 1f 03 	jmp	0x63e	; 0x63e <_exit>

000000c6 <__bad_interrupt>:
  c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <releAtivated>:

		if(serialReadPosRX >= BUFFER_SIZE){ serialReadPosRX = 0; }
	}
		
	return ret;
}
  ca:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <releAct>
  ce:	90 33       	cpi	r25, 0x30	; 48
  d0:	29 f4       	brne	.+10     	; 0xdc <releAtivated+0x12>
  d2:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <releAct>
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	08 95       	ret
  dc:	98 13       	cpse	r25, r24
  de:	06 c0       	rjmp	.+12     	; 0xec <releAtivated+0x22>
  e0:	80 e3       	ldi	r24, 0x30	; 48
  e2:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <releAct>
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	08 95       	ret
  ec:	98 13       	cpse	r25, r24
  ee:	01 c0       	rjmp	.+2      	; 0xf2 <releAtivated+0x28>
  f0:	08 95       	ret
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	08 95       	ret

000000f8 <clearBUFFERrx>:
  f8:	80 e8       	ldi	r24, 0x80	; 128
  fa:	ee e9       	ldi	r30, 0x9E	; 158
  fc:	f1 e0       	ldi	r31, 0x01	; 1
  fe:	df 01       	movw	r26, r30
 100:	1d 92       	st	X+, r1
 102:	8a 95       	dec	r24
 104:	e9 f7       	brne	.-6      	; 0x100 <clearBUFFERrx+0x8>
 106:	08 95       	ret

00000108 <configSerialCOMM>:
 108:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7fc0c5>
 10c:	87 e6       	ldi	r24, 0x67	; 103
 10e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7fc0c4>
 112:	88 ed       	ldi	r24, 0xD8	; 216
 114:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7fc0c1>
 118:	86 e0       	ldi	r24, 0x06	; 6
 11a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7fc0c2>
 11e:	08 95       	ret

00000120 <getDataSerial>:

char getDataSerial()
{
	char ret = '\0';

	if(serialReadPosRX != serialReadPos)	{ ret = serialBUFFERrx[serialReadPosRX]; }
 120:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <__data_end>
 124:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <serialReadPos>
 128:	98 17       	cp	r25, r24
 12a:	31 f0       	breq	.+12     	; 0x138 <getDataSerial+0x18>
 12c:	e9 2f       	mov	r30, r25
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	e2 56       	subi	r30, 0x62	; 98
 132:	fe 4f       	sbci	r31, 0xFE	; 254
 134:	80 81       	ld	r24, Z
 136:	01 c0       	rjmp	.+2      	; 0x13a <getDataSerial+0x1a>
	return ret;
}

char getDataSerial()
{
	char ret = '\0';
 138:	80 e0       	ldi	r24, 0x00	; 0

	if(serialReadPosRX != serialReadPos)	{ ret = serialBUFFERrx[serialReadPosRX]; }
	
	serialReadPosRX++;
 13a:	9f 5f       	subi	r25, 0xFF	; 255
 13c:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <__data_end>

	if(serialReadPosRX >= BUFFER_SIZE){ serialReadPosRX = 0; }
 140:	99 23       	and	r25, r25
 142:	14 f4       	brge	.+4      	; 0x148 <getDataSerial+0x28>
 144:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <__data_end>

	return ret;
}
 148:	08 95       	ret

0000014a <appendSerial>:


void appendSerial(char c) // insere na fila os caracteres para serem enviados pela serial
{
	serialBUFFER[serialWritePos] = c;
 14a:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <serialWritePos>
 14e:	e9 2f       	mov	r30, r25
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	e2 5e       	subi	r30, 0xE2	; 226
 154:	fe 4f       	sbci	r31, 0xFE	; 254
 156:	80 83       	st	Z, r24
	serialWritePos ++;
 158:	9f 5f       	subi	r25, 0xFF	; 255
 15a:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <serialWritePos>

	if(serialWritePos >= BUFFER_SIZE){ serialWritePos = 0; }
 15e:	99 23       	and	r25, r25
 160:	14 f4       	brge	.+4      	; 0x166 <appendSerial+0x1c>
 162:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <serialWritePos>
 166:	08 95       	ret

00000168 <serialWriter>:

}
void serialWriter(char c[]) // envia caracteres pela serial
{
 168:	1f 93       	push	r17
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
 16e:	ec 01       	movw	r28, r24
	for(uint8_t i=0; i<strlen(c); i++)
 170:	10 e0       	ldi	r17, 0x00	; 0
 172:	07 c0       	rjmp	.+14     	; 0x182 <serialWriter+0x1a>
	{
		appendSerial(c[i]);
 174:	fe 01       	movw	r30, r28
 176:	e8 0f       	add	r30, r24
 178:	f9 1f       	adc	r31, r25
 17a:	80 81       	ld	r24, Z
 17c:	0e 94 a5 00 	call	0x14a	; 0x14a <appendSerial>
	if(serialWritePos >= BUFFER_SIZE){ serialWritePos = 0; }

}
void serialWriter(char c[]) // envia caracteres pela serial
{
	for(uint8_t i=0; i<strlen(c); i++)
 180:	1f 5f       	subi	r17, 0xFF	; 255
 182:	81 2f       	mov	r24, r17
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	fe 01       	movw	r30, r28
 188:	01 90       	ld	r0, Z+
 18a:	00 20       	and	r0, r0
 18c:	e9 f7       	brne	.-6      	; 0x188 <serialWriter+0x20>
 18e:	31 97       	sbiw	r30, 0x01	; 1
 190:	ec 1b       	sub	r30, r28
 192:	fd 0b       	sbc	r31, r29
 194:	8e 17       	cp	r24, r30
 196:	9f 07       	cpc	r25, r31
 198:	68 f3       	brcs	.-38     	; 0x174 <serialWriter+0xc>
	{
		appendSerial(c[i]);
	}
	
	if(UCSR0A & (1 << UDRE0)){ UDR0 = 0; } // Verifica se serial está livre para transmitir
 19a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7fc0c0>
 19e:	85 fd       	sbrc	r24, 5
 1a0:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fc0c6>
}
 1a4:	df 91       	pop	r29
 1a6:	cf 91       	pop	r28
 1a8:	1f 91       	pop	r17
 1aa:	08 95       	ret

000001ac <setReleEnable>:
	}else
	{
		DDRC |= 0x7F;
	}*/

	switch(pinNumber)
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	82 31       	cpi	r24, 0x12	; 18
 1b0:	91 05       	cpc	r25, r1
 1b2:	08 f0       	brcs	.+2      	; 0x1b6 <setReleEnable+0xa>
 1b4:	49 c1       	rjmp	.+658    	; 0x448 <__DATA_REGION_LENGTH__+0x48>
 1b6:	8c 5c       	subi	r24, 0xCC	; 204
 1b8:	9f 4f       	sbci	r25, 0xFF	; 255
 1ba:	fc 01       	movw	r30, r24
 1bc:	0c 94 19 03 	jmp	0x632	; 0x632 <__tablejump2__>
	{
		case 1:
			if(PORTD_get_pin_level(PD2) == true)
 1c0:	4a 9b       	sbis	0x09, 2	; 9
 1c2:	08 c0       	rjmp	.+16     	; 0x1d4 <setReleEnable+0x28>
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
	} else {
		PORTD &= ~(1 << pin);
 1c4:	8b b1       	in	r24, 0x0b	; 11
 1c6:	8b 7f       	andi	r24, 0xFB	; 251
 1c8:	8b b9       	out	0x0b, r24	; 11
			{
				PORTD_set_pin_level(PD2, false);
				serialWriter("\n\rRELE ON\n\r");
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	91 e0       	ldi	r25, 0x01	; 1
 1ce:	0e 94 b4 00 	call	0x168	; 0x168 <serialWriter>
 1d2:	3d c1       	rjmp	.+634    	; 0x44e <__DATA_REGION_LENGTH__+0x4e>
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
 1d4:	8b b1       	in	r24, 0x0b	; 11
 1d6:	84 60       	ori	r24, 0x04	; 4
 1d8:	8b b9       	out	0x0b, r24	; 11
			}
			else
			{
				PORTD_set_pin_level(PD2, true);
				serialWriter("\n\rRELE OFF\n\r");
 1da:	8c e0       	ldi	r24, 0x0C	; 12
 1dc:	91 e0       	ldi	r25, 0x01	; 1
 1de:	0e 94 b4 00 	call	0x168	; 0x168 <serialWriter>
 1e2:	35 c1       	rjmp	.+618    	; 0x44e <__DATA_REGION_LENGTH__+0x4e>
			}
		break;
		case 2:
			if(PORTD_get_pin_level(PD3) == true)
 1e4:	4b 9b       	sbis	0x09, 3	; 9
 1e6:	08 c0       	rjmp	.+16     	; 0x1f8 <setReleEnable+0x4c>
	} else {
		PORTD &= ~(1 << pin);
 1e8:	8b b1       	in	r24, 0x0b	; 11
 1ea:	87 7f       	andi	r24, 0xF7	; 247
 1ec:	8b b9       	out	0x0b, r24	; 11
			{
				PORTD_set_pin_level(PD3, false);
				serialWriter("\n\rRELE ON\n\r");
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	91 e0       	ldi	r25, 0x01	; 1
 1f2:	0e 94 b4 00 	call	0x168	; 0x168 <serialWriter>
 1f6:	2b c1       	rjmp	.+598    	; 0x44e <__DATA_REGION_LENGTH__+0x4e>
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
 1f8:	8b b1       	in	r24, 0x0b	; 11
 1fa:	88 60       	ori	r24, 0x08	; 8
 1fc:	8b b9       	out	0x0b, r24	; 11
			}
			else
			{
				PORTD_set_pin_level(PD3, true);
				serialWriter("\n\rRELE OFF\n\r");
 1fe:	8c e0       	ldi	r24, 0x0C	; 12
 200:	91 e0       	ldi	r25, 0x01	; 1
 202:	0e 94 b4 00 	call	0x168	; 0x168 <serialWriter>
 206:	23 c1       	rjmp	.+582    	; 0x44e <__DATA_REGION_LENGTH__+0x4e>
			}
		break;
		case 3:
			if(PORTD_get_pin_level(PD4) == true)
 208:	4c 9b       	sbis	0x09, 4	; 9
 20a:	08 c0       	rjmp	.+16     	; 0x21c <__EEPROM_REGION_LENGTH__+0x1c>
	} else {
		PORTD &= ~(1 << pin);
 20c:	8b b1       	in	r24, 0x0b	; 11
 20e:	8f 7e       	andi	r24, 0xEF	; 239
 210:	8b b9       	out	0x0b, r24	; 11
			{
				PORTD_set_pin_level(PD4, false);
				serialWriter("\n\rRELE ON\n\r");
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	91 e0       	ldi	r25, 0x01	; 1
 216:	0e 94 b4 00 	call	0x168	; 0x168 <serialWriter>
 21a:	19 c1       	rjmp	.+562    	; 0x44e <__DATA_REGION_LENGTH__+0x4e>
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
 21c:	8b b1       	in	r24, 0x0b	; 11
 21e:	80 61       	ori	r24, 0x10	; 16
 220:	8b b9       	out	0x0b, r24	; 11
			}
			else
			{
				PORTD_set_pin_level(PD4, true);
				serialWriter("\n\rRELE OFF\n\r");
 222:	8c e0       	ldi	r24, 0x0C	; 12
 224:	91 e0       	ldi	r25, 0x01	; 1
 226:	0e 94 b4 00 	call	0x168	; 0x168 <serialWriter>
 22a:	11 c1       	rjmp	.+546    	; 0x44e <__DATA_REGION_LENGTH__+0x4e>
			}
		break;
		case 4:
			if(PORTD_get_pin_level(PD5) == true)
 22c:	4d 9b       	sbis	0x09, 5	; 9
 22e:	08 c0       	rjmp	.+16     	; 0x240 <__EEPROM_REGION_LENGTH__+0x40>
	} else {
		PORTD &= ~(1 << pin);
 230:	8b b1       	in	r24, 0x0b	; 11
 232:	8f 7d       	andi	r24, 0xDF	; 223
 234:	8b b9       	out	0x0b, r24	; 11
			{
				PORTD_set_pin_level(PD5, false);
				serialWriter("\n\rRELE ON\n\r");
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	91 e0       	ldi	r25, 0x01	; 1
 23a:	0e 94 b4 00 	call	0x168	; 0x168 <serialWriter>
 23e:	07 c1       	rjmp	.+526    	; 0x44e <__DATA_REGION_LENGTH__+0x4e>
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
 240:	8b b1       	in	r24, 0x0b	; 11
 242:	80 62       	ori	r24, 0x20	; 32
 244:	8b b9       	out	0x0b, r24	; 11
			}
			else
			{
				PORTD_set_pin_level(PD5, true);
				serialWriter("\n\rRELE OFF\n\r");
 246:	8c e0       	ldi	r24, 0x0C	; 12
 248:	91 e0       	ldi	r25, 0x01	; 1
 24a:	0e 94 b4 00 	call	0x168	; 0x168 <serialWriter>
 24e:	ff c0       	rjmp	.+510    	; 0x44e <__DATA_REGION_LENGTH__+0x4e>
			}
		break;
		case 5:
			if(PORTD_get_pin_level(PD6) == true)
 250:	4e 9b       	sbis	0x09, 6	; 9
 252:	08 c0       	rjmp	.+16     	; 0x264 <__EEPROM_REGION_LENGTH__+0x64>
	} else {
		PORTD &= ~(1 << pin);
 254:	8b b1       	in	r24, 0x0b	; 11
 256:	8f 7b       	andi	r24, 0xBF	; 191
 258:	8b b9       	out	0x0b, r24	; 11
			{
				PORTD_set_pin_level(PD6, false);
				serialWriter("\n\rRELE ON\n\r");
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	91 e0       	ldi	r25, 0x01	; 1
 25e:	0e 94 b4 00 	call	0x168	; 0x168 <serialWriter>
 262:	f5 c0       	rjmp	.+490    	; 0x44e <__DATA_REGION_LENGTH__+0x4e>
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
 264:	8b b1       	in	r24, 0x0b	; 11
 266:	80 64       	ori	r24, 0x40	; 64
 268:	8b b9       	out	0x0b, r24	; 11
			}
			else
			{
				PORTD_set_pin_level(PD6, true);
				serialWriter("\n\rRELE OFF\n\r");
 26a:	8c e0       	ldi	r24, 0x0C	; 12
 26c:	91 e0       	ldi	r25, 0x01	; 1
 26e:	0e 94 b4 00 	call	0x168	; 0x168 <serialWriter>
 272:	ed c0       	rjmp	.+474    	; 0x44e <__DATA_REGION_LENGTH__+0x4e>
			}
		break;
		case 6:
			if(PORTD_get_pin_level(PD7) == true)
 274:	4f 9b       	sbis	0x09, 7	; 9
 276:	08 c0       	rjmp	.+16     	; 0x288 <__EEPROM_REGION_LENGTH__+0x88>
	} else {
		PORTD &= ~(1 << pin);
 278:	8b b1       	in	r24, 0x0b	; 11
 27a:	8f 77       	andi	r24, 0x7F	; 127
 27c:	8b b9       	out	0x0b, r24	; 11
			{
				PORTD_set_pin_level(PD7, false);
				serialWriter("\n\rRELE ON\n\r");
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	91 e0       	ldi	r25, 0x01	; 1
 282:	0e 94 b4 00 	call	0x168	; 0x168 <serialWriter>
 286:	e3 c0       	rjmp	.+454    	; 0x44e <__DATA_REGION_LENGTH__+0x4e>
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
 288:	8b b1       	in	r24, 0x0b	; 11
 28a:	80 68       	ori	r24, 0x80	; 128
 28c:	8b b9       	out	0x0b, r24	; 11
			}
			else
			{
				PORTD_set_pin_level(PD7, true);
				serialWriter("\n\rRELE OFF\n\r");
 28e:	8c e0       	ldi	r24, 0x0C	; 12
 290:	91 e0       	ldi	r25, 0x01	; 1
 292:	0e 94 b4 00 	call	0x168	; 0x168 <serialWriter>
 296:	db c0       	rjmp	.+438    	; 0x44e <__DATA_REGION_LENGTH__+0x4e>
			}
		break;
		case 7:
			if(PORTB_get_pin_level(PB0) == true)
 298:	18 9b       	sbis	0x03, 0	; 3
 29a:	08 c0       	rjmp	.+16     	; 0x2ac <__EEPROM_REGION_LENGTH__+0xac>
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
	} else {
		PORTB &= ~(1 << pin);
 29c:	85 b1       	in	r24, 0x05	; 5
 29e:	8e 7f       	andi	r24, 0xFE	; 254
 2a0:	85 b9       	out	0x05, r24	; 5
			{
				PORTB_set_pin_level(PB0, false);
				serialWriter("\n\rRELE ON\n\r");
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	91 e0       	ldi	r25, 0x01	; 1
 2a6:	0e 94 b4 00 	call	0x168	; 0x168 <serialWriter>
 2aa:	d1 c0       	rjmp	.+418    	; 0x44e <__DATA_REGION_LENGTH__+0x4e>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
 2ac:	85 b1       	in	r24, 0x05	; 5
 2ae:	81 60       	ori	r24, 0x01	; 1
 2b0:	85 b9       	out	0x05, r24	; 5
			}
			else
			{
				PORTB_set_pin_level(PB0, true);
				serialWriter("\n\rRELE OFF\n\r");
 2b2:	8c e0       	ldi	r24, 0x0C	; 12
 2b4:	91 e0       	ldi	r25, 0x01	; 1
 2b6:	0e 94 b4 00 	call	0x168	; 0x168 <serialWriter>
 2ba:	c9 c0       	rjmp	.+402    	; 0x44e <__DATA_REGION_LENGTH__+0x4e>
			}
		break;
		case 8:
			if(PORTB_get_pin_level(PB1) == true)
 2bc:	19 9b       	sbis	0x03, 1	; 3
 2be:	08 c0       	rjmp	.+16     	; 0x2d0 <__EEPROM_REGION_LENGTH__+0xd0>
	} else {
		PORTB &= ~(1 << pin);
 2c0:	85 b1       	in	r24, 0x05	; 5
 2c2:	8d 7f       	andi	r24, 0xFD	; 253
 2c4:	85 b9       	out	0x05, r24	; 5
			{
				PORTB_set_pin_level(PB1, false);
				serialWriter("\n\rRELE ON\n\r");
 2c6:	80 e0       	ldi	r24, 0x00	; 0
 2c8:	91 e0       	ldi	r25, 0x01	; 1
 2ca:	0e 94 b4 00 	call	0x168	; 0x168 <serialWriter>
 2ce:	bf c0       	rjmp	.+382    	; 0x44e <__DATA_REGION_LENGTH__+0x4e>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
 2d0:	85 b1       	in	r24, 0x05	; 5
 2d2:	82 60       	ori	r24, 0x02	; 2
 2d4:	85 b9       	out	0x05, r24	; 5
			}
			else
			{
				PORTB_set_pin_level(PB1, true);
				serialWriter("\n\rRELE OFF\n\r");
 2d6:	8c e0       	ldi	r24, 0x0C	; 12
 2d8:	91 e0       	ldi	r25, 0x01	; 1
 2da:	0e 94 b4 00 	call	0x168	; 0x168 <serialWriter>
 2de:	b7 c0       	rjmp	.+366    	; 0x44e <__DATA_REGION_LENGTH__+0x4e>
			}
		break;
		case 9:
			if(PORTB_get_pin_level(PB2) == true)
 2e0:	1a 9b       	sbis	0x03, 2	; 3
 2e2:	08 c0       	rjmp	.+16     	; 0x2f4 <__EEPROM_REGION_LENGTH__+0xf4>
	} else {
		PORTB &= ~(1 << pin);
 2e4:	85 b1       	in	r24, 0x05	; 5
 2e6:	8b 7f       	andi	r24, 0xFB	; 251
 2e8:	85 b9       	out	0x05, r24	; 5
			{
				PORTB_set_pin_level(PB2, false);
				serialWriter("\n\rRELE OFF\n\r");
 2ea:	8c e0       	ldi	r24, 0x0C	; 12
 2ec:	91 e0       	ldi	r25, 0x01	; 1
 2ee:	0e 94 b4 00 	call	0x168	; 0x168 <serialWriter>
 2f2:	ad c0       	rjmp	.+346    	; 0x44e <__DATA_REGION_LENGTH__+0x4e>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
 2f4:	85 b1       	in	r24, 0x05	; 5
 2f6:	84 60       	ori	r24, 0x04	; 4
 2f8:	85 b9       	out	0x05, r24	; 5
			}
			else
			{
				PORTB_set_pin_level(PB2, true);
				serialWriter("\n\rRELE ON\n\r");
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	91 e0       	ldi	r25, 0x01	; 1
 2fe:	0e 94 b4 00 	call	0x168	; 0x168 <serialWriter>
 302:	a5 c0       	rjmp	.+330    	; 0x44e <__DATA_REGION_LENGTH__+0x4e>
			}
		break;
		case 10:
			if(PORTB_get_pin_level(PB3) == true)
 304:	1b 9b       	sbis	0x03, 3	; 3
 306:	08 c0       	rjmp	.+16     	; 0x318 <__EEPROM_REGION_LENGTH__+0x118>
	} else {
		PORTB &= ~(1 << pin);
 308:	85 b1       	in	r24, 0x05	; 5
 30a:	87 7f       	andi	r24, 0xF7	; 247
 30c:	85 b9       	out	0x05, r24	; 5
			{
				PORTB_set_pin_level(PB3, false);
				serialWriter("\n\rRELE OFF\n\r");
 30e:	8c e0       	ldi	r24, 0x0C	; 12
 310:	91 e0       	ldi	r25, 0x01	; 1
 312:	0e 94 b4 00 	call	0x168	; 0x168 <serialWriter>
 316:	9b c0       	rjmp	.+310    	; 0x44e <__DATA_REGION_LENGTH__+0x4e>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
 318:	85 b1       	in	r24, 0x05	; 5
 31a:	88 60       	ori	r24, 0x08	; 8
 31c:	85 b9       	out	0x05, r24	; 5
			}
			else
			{
				PORTB_set_pin_level(PB3, true);
				serialWriter("\n\rRELE ON\n\r");
 31e:	80 e0       	ldi	r24, 0x00	; 0
 320:	91 e0       	ldi	r25, 0x01	; 1
 322:	0e 94 b4 00 	call	0x168	; 0x168 <serialWriter>
 326:	93 c0       	rjmp	.+294    	; 0x44e <__DATA_REGION_LENGTH__+0x4e>
			}
		break;
		case 11:	
			if(PORTB_get_pin_level(PB4) == true)
 328:	1c 9b       	sbis	0x03, 4	; 3
 32a:	08 c0       	rjmp	.+16     	; 0x33c <__EEPROM_REGION_LENGTH__+0x13c>
	} else {
		PORTB &= ~(1 << pin);
 32c:	85 b1       	in	r24, 0x05	; 5
 32e:	8f 7e       	andi	r24, 0xEF	; 239
 330:	85 b9       	out	0x05, r24	; 5
			{
				PORTB_set_pin_level(PB4, false);
				serialWriter("\n\rRELE OFF\n\r");
 332:	8c e0       	ldi	r24, 0x0C	; 12
 334:	91 e0       	ldi	r25, 0x01	; 1
 336:	0e 94 b4 00 	call	0x168	; 0x168 <serialWriter>
 33a:	89 c0       	rjmp	.+274    	; 0x44e <__DATA_REGION_LENGTH__+0x4e>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
 33c:	85 b1       	in	r24, 0x05	; 5
 33e:	80 61       	ori	r24, 0x10	; 16
 340:	85 b9       	out	0x05, r24	; 5
			}
			else
			{
				PORTB_set_pin_level(PB4, true);
				serialWriter("\n\rRELE ON\n\r");
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	91 e0       	ldi	r25, 0x01	; 1
 346:	0e 94 b4 00 	call	0x168	; 0x168 <serialWriter>
 34a:	81 c0       	rjmp	.+258    	; 0x44e <__DATA_REGION_LENGTH__+0x4e>
			}
		break;
		case 12:
			if(PORTC_get_pin_level(PC0) == true)
 34c:	30 9b       	sbis	0x06, 0	; 6
 34e:	08 c0       	rjmp	.+16     	; 0x360 <__EEPROM_REGION_LENGTH__+0x160>
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTC |= 1 << pin;
	} else {
		PORTC &= ~(1 << pin);
 350:	88 b1       	in	r24, 0x08	; 8
 352:	8e 7f       	andi	r24, 0xFE	; 254
 354:	88 b9       	out	0x08, r24	; 8
			{
				PORTC_set_pin_level(PC0, false);
				serialWriter("\n\rRELE OFF\n\r");
 356:	8c e0       	ldi	r24, 0x0C	; 12
 358:	91 e0       	ldi	r25, 0x01	; 1
 35a:	0e 94 b4 00 	call	0x168	; 0x168 <serialWriter>
 35e:	77 c0       	rjmp	.+238    	; 0x44e <__DATA_REGION_LENGTH__+0x4e>
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTC |= 1 << pin;
 360:	88 b1       	in	r24, 0x08	; 8
 362:	81 60       	ori	r24, 0x01	; 1
 364:	88 b9       	out	0x08, r24	; 8
			}
			else
			{
				PORTC_set_pin_level(PC0, true);
				serialWriter("\n\rRELE ON\n\r");
 366:	80 e0       	ldi	r24, 0x00	; 0
 368:	91 e0       	ldi	r25, 0x01	; 1
 36a:	0e 94 b4 00 	call	0x168	; 0x168 <serialWriter>
 36e:	6f c0       	rjmp	.+222    	; 0x44e <__DATA_REGION_LENGTH__+0x4e>
			}
		break;
		case 13:
			if(PORTC_get_pin_level(PC1) == true)
 370:	31 9b       	sbis	0x06, 1	; 6
 372:	08 c0       	rjmp	.+16     	; 0x384 <__EEPROM_REGION_LENGTH__+0x184>
	} else {
		PORTC &= ~(1 << pin);
 374:	88 b1       	in	r24, 0x08	; 8
 376:	8d 7f       	andi	r24, 0xFD	; 253
 378:	88 b9       	out	0x08, r24	; 8
			{
				PORTC_set_pin_level(PC1, false);
				serialWriter("\n\rRELE OFF\n\r");
 37a:	8c e0       	ldi	r24, 0x0C	; 12
 37c:	91 e0       	ldi	r25, 0x01	; 1
 37e:	0e 94 b4 00 	call	0x168	; 0x168 <serialWriter>
 382:	65 c0       	rjmp	.+202    	; 0x44e <__DATA_REGION_LENGTH__+0x4e>
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTC |= 1 << pin;
 384:	88 b1       	in	r24, 0x08	; 8
 386:	82 60       	ori	r24, 0x02	; 2
 388:	88 b9       	out	0x08, r24	; 8
			}
			else
			{
				PORTC_set_pin_level(PC1, true);
				serialWriter("\n\rRELE ON\n\r");
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	91 e0       	ldi	r25, 0x01	; 1
 38e:	0e 94 b4 00 	call	0x168	; 0x168 <serialWriter>
 392:	5d c0       	rjmp	.+186    	; 0x44e <__DATA_REGION_LENGTH__+0x4e>
			}
		break;
		case 14:
			if(PORTC_get_pin_level(PC2) == true)
 394:	32 9b       	sbis	0x06, 2	; 6
 396:	08 c0       	rjmp	.+16     	; 0x3a8 <__EEPROM_REGION_LENGTH__+0x1a8>
	} else {
		PORTC &= ~(1 << pin);
 398:	88 b1       	in	r24, 0x08	; 8
 39a:	8b 7f       	andi	r24, 0xFB	; 251
 39c:	88 b9       	out	0x08, r24	; 8
			{
				PORTC_set_pin_level(PC2, false);
				serialWriter("\n\rRELE OFF\n\r");
 39e:	8c e0       	ldi	r24, 0x0C	; 12
 3a0:	91 e0       	ldi	r25, 0x01	; 1
 3a2:	0e 94 b4 00 	call	0x168	; 0x168 <serialWriter>
 3a6:	53 c0       	rjmp	.+166    	; 0x44e <__DATA_REGION_LENGTH__+0x4e>
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTC |= 1 << pin;
 3a8:	88 b1       	in	r24, 0x08	; 8
 3aa:	84 60       	ori	r24, 0x04	; 4
 3ac:	88 b9       	out	0x08, r24	; 8
			}
			else
			{
				PORTC_set_pin_level(PC2, true);
				serialWriter("\n\rRELE ON\n\r");
 3ae:	80 e0       	ldi	r24, 0x00	; 0
 3b0:	91 e0       	ldi	r25, 0x01	; 1
 3b2:	0e 94 b4 00 	call	0x168	; 0x168 <serialWriter>
 3b6:	4b c0       	rjmp	.+150    	; 0x44e <__DATA_REGION_LENGTH__+0x4e>
			}
		break;
		case 15:
			if(PORTC_get_pin_level(PC3) == true)
 3b8:	33 9b       	sbis	0x06, 3	; 6
 3ba:	08 c0       	rjmp	.+16     	; 0x3cc <__EEPROM_REGION_LENGTH__+0x1cc>
	} else {
		PORTC &= ~(1 << pin);
 3bc:	88 b1       	in	r24, 0x08	; 8
 3be:	87 7f       	andi	r24, 0xF7	; 247
 3c0:	88 b9       	out	0x08, r24	; 8
			{
				PORTC_set_pin_level(PC3, false);
				serialWriter("\n\rRELE OFF\n\r");
 3c2:	8c e0       	ldi	r24, 0x0C	; 12
 3c4:	91 e0       	ldi	r25, 0x01	; 1
 3c6:	0e 94 b4 00 	call	0x168	; 0x168 <serialWriter>
 3ca:	41 c0       	rjmp	.+130    	; 0x44e <__DATA_REGION_LENGTH__+0x4e>
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTC |= 1 << pin;
 3cc:	88 b1       	in	r24, 0x08	; 8
 3ce:	88 60       	ori	r24, 0x08	; 8
 3d0:	88 b9       	out	0x08, r24	; 8
			}
			else
			{
				PORTC_set_pin_level(PC3, true);
				serialWriter("\n\rRELE ON\n\r");
 3d2:	80 e0       	ldi	r24, 0x00	; 0
 3d4:	91 e0       	ldi	r25, 0x01	; 1
 3d6:	0e 94 b4 00 	call	0x168	; 0x168 <serialWriter>
 3da:	39 c0       	rjmp	.+114    	; 0x44e <__DATA_REGION_LENGTH__+0x4e>
			}
		break;
		case 16:
			if(PORTC_get_pin_level(PC4) == true)
 3dc:	34 9b       	sbis	0x06, 4	; 6
 3de:	08 c0       	rjmp	.+16     	; 0x3f0 <__EEPROM_REGION_LENGTH__+0x1f0>
	} else {
		PORTC &= ~(1 << pin);
 3e0:	88 b1       	in	r24, 0x08	; 8
 3e2:	8f 7e       	andi	r24, 0xEF	; 239
 3e4:	88 b9       	out	0x08, r24	; 8
			{
				PORTC_set_pin_level(PC4, false);
				serialWriter("\n\rRELE OFF\n\r");
 3e6:	8c e0       	ldi	r24, 0x0C	; 12
 3e8:	91 e0       	ldi	r25, 0x01	; 1
 3ea:	0e 94 b4 00 	call	0x168	; 0x168 <serialWriter>
 3ee:	2f c0       	rjmp	.+94     	; 0x44e <__DATA_REGION_LENGTH__+0x4e>
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTC |= 1 << pin;
 3f0:	88 b1       	in	r24, 0x08	; 8
 3f2:	80 61       	ori	r24, 0x10	; 16
 3f4:	88 b9       	out	0x08, r24	; 8
			}
			else
			{
				PORTC_set_pin_level(PC4, true);
				serialWriter("\n\rRELE ON\n\r");
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	91 e0       	ldi	r25, 0x01	; 1
 3fa:	0e 94 b4 00 	call	0x168	; 0x168 <serialWriter>
 3fe:	27 c0       	rjmp	.+78     	; 0x44e <__DATA_REGION_LENGTH__+0x4e>
			}
		break;
		case 17:
			if(PORTC_get_pin_level(PC5) == true)
 400:	35 9b       	sbis	0x06, 5	; 6
 402:	08 c0       	rjmp	.+16     	; 0x414 <__DATA_REGION_LENGTH__+0x14>
	} else {
		PORTC &= ~(1 << pin);
 404:	88 b1       	in	r24, 0x08	; 8
 406:	8f 7d       	andi	r24, 0xDF	; 223
 408:	88 b9       	out	0x08, r24	; 8
			{
				PORTC_set_pin_level(PC5, false);
				serialWriter("\n\rRELE OFF\n\r");
 40a:	8c e0       	ldi	r24, 0x0C	; 12
 40c:	91 e0       	ldi	r25, 0x01	; 1
 40e:	0e 94 b4 00 	call	0x168	; 0x168 <serialWriter>
 412:	1d c0       	rjmp	.+58     	; 0x44e <__DATA_REGION_LENGTH__+0x4e>
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTC |= 1 << pin;
 414:	88 b1       	in	r24, 0x08	; 8
 416:	80 62       	ori	r24, 0x20	; 32
 418:	88 b9       	out	0x08, r24	; 8
			}
			else
			{
				PORTC_set_pin_level(PC5, true);
				serialWriter("\n\rRELE ON\n\r");
 41a:	80 e0       	ldi	r24, 0x00	; 0
 41c:	91 e0       	ldi	r25, 0x01	; 1
 41e:	0e 94 b4 00 	call	0x168	; 0x168 <serialWriter>
 422:	15 c0       	rjmp	.+42     	; 0x44e <__DATA_REGION_LENGTH__+0x4e>
			}
		break;
		case 18:
			if(PORTC_get_pin_level(PC6) == true)
 424:	36 9b       	sbis	0x06, 6	; 6
 426:	08 c0       	rjmp	.+16     	; 0x438 <__DATA_REGION_LENGTH__+0x38>
	} else {
		PORTC &= ~(1 << pin);
 428:	88 b1       	in	r24, 0x08	; 8
 42a:	8f 7b       	andi	r24, 0xBF	; 191
 42c:	88 b9       	out	0x08, r24	; 8
			{
				PORTC_set_pin_level(PC6, false);
				serialWriter("\n\rRELE OFF\n\r");
 42e:	8c e0       	ldi	r24, 0x0C	; 12
 430:	91 e0       	ldi	r25, 0x01	; 1
 432:	0e 94 b4 00 	call	0x168	; 0x168 <serialWriter>
 436:	0b c0       	rjmp	.+22     	; 0x44e <__DATA_REGION_LENGTH__+0x4e>
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTC |= 1 << pin;
 438:	88 b1       	in	r24, 0x08	; 8
 43a:	80 64       	ori	r24, 0x40	; 64
 43c:	88 b9       	out	0x08, r24	; 8
			}
			else
			{
				PORTC_set_pin_level(PC6, true);
				serialWriter("\n\rRELE ON\n\r");
 43e:	80 e0       	ldi	r24, 0x00	; 0
 440:	91 e0       	ldi	r25, 0x01	; 1
 442:	0e 94 b4 00 	call	0x168	; 0x168 <serialWriter>
 446:	03 c0       	rjmp	.+6      	; 0x44e <__DATA_REGION_LENGTH__+0x4e>
			}
		break;
		default:
			return 1;
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	08 95       	ret
		break;
	}

}
 44e:	08 95       	ret

00000450 <main>:
char getDataSerial();
int  releAtivated(char aux);

int main(void)
{
	configSerialCOMM(); // iniciliza porta COM
 450:	0e 94 84 00 	call	0x108	; 0x108 <configSerialCOMM>
	sei(); // habilita interrupções
 454:	78 94       	sei

	//serialWriter("\nDigite 1\n\r");

	DDRD |= 0xFC; // seta de PD2 a PD7 como OUTPUT
 456:	8a b1       	in	r24, 0x0a	; 10
 458:	8c 6f       	ori	r24, 0xFC	; 252
 45a:	8a b9       	out	0x0a, r24	; 10
	DDRB |= 0x1F; // seta de PB0 a PB4 como OUTPUT
 45c:	84 b1       	in	r24, 0x04	; 4
 45e:	8f 61       	ori	r24, 0x1F	; 31
 460:	84 b9       	out	0x04, r24	; 4
	//int count = 0;
	int setReleControl = 0; 

	while(1)
	{		
		aux = getDataSerial();
 462:	0e 94 90 00 	call	0x120	; 0x120 <getDataSerial>
 466:	c8 2f       	mov	r28, r24
		
		setReleControl = releAtivated(aux);
 468:	0e 94 65 00 	call	0xca	; 0xca <releAtivated>
		if(setReleControl == 1)
 46c:	01 97       	sbiw	r24, 0x01	; 1
 46e:	c9 f7       	brne	.-14     	; 0x462 <main+0x12>
		{
		    if(aux == '1')
 470:	c1 33       	cpi	r28, 0x31	; 49
 472:	39 f4       	brne	.+14     	; 0x482 <main+0x32>
			{
				setReleEnable(1);
 474:	81 e0       	ldi	r24, 0x01	; 1
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	0e 94 d6 00 	call	0x1ac	; 0x1ac <setReleEnable>
				clearBUFFERrx();
 47c:	0e 94 7c 00 	call	0xf8	; 0xf8 <clearBUFFERrx>
 480:	f0 cf       	rjmp	.-32     	; 0x462 <main+0x12>
			}
			else if(aux == '2')
 482:	c2 33       	cpi	r28, 0x32	; 50
 484:	39 f4       	brne	.+14     	; 0x494 <main+0x44>
			{
				setReleEnable(2);
 486:	82 e0       	ldi	r24, 0x02	; 2
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <setReleEnable>
				clearBUFFERrx();
 48e:	0e 94 7c 00 	call	0xf8	; 0xf8 <clearBUFFERrx>
 492:	e7 cf       	rjmp	.-50     	; 0x462 <main+0x12>
			}
			else if(aux == '3')
 494:	c3 33       	cpi	r28, 0x33	; 51
 496:	39 f4       	brne	.+14     	; 0x4a6 <main+0x56>
			{
				setReleEnable(3);
 498:	83 e0       	ldi	r24, 0x03	; 3
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	0e 94 d6 00 	call	0x1ac	; 0x1ac <setReleEnable>
				clearBUFFERrx();
 4a0:	0e 94 7c 00 	call	0xf8	; 0xf8 <clearBUFFERrx>
 4a4:	de cf       	rjmp	.-68     	; 0x462 <main+0x12>
			}
			else if(aux == '4')
 4a6:	c4 33       	cpi	r28, 0x34	; 52
 4a8:	39 f4       	brne	.+14     	; 0x4b8 <main+0x68>
			{
				setReleEnable(4);
 4aa:	84 e0       	ldi	r24, 0x04	; 4
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	0e 94 d6 00 	call	0x1ac	; 0x1ac <setReleEnable>
				clearBUFFERrx();
 4b2:	0e 94 7c 00 	call	0xf8	; 0xf8 <clearBUFFERrx>
 4b6:	d5 cf       	rjmp	.-86     	; 0x462 <main+0x12>
			}
			else if(aux == '5')
 4b8:	c5 33       	cpi	r28, 0x35	; 53
 4ba:	39 f4       	brne	.+14     	; 0x4ca <main+0x7a>
			{
				setReleEnable(5);
 4bc:	85 e0       	ldi	r24, 0x05	; 5
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	0e 94 d6 00 	call	0x1ac	; 0x1ac <setReleEnable>
				clearBUFFERrx();
 4c4:	0e 94 7c 00 	call	0xf8	; 0xf8 <clearBUFFERrx>
 4c8:	cc cf       	rjmp	.-104    	; 0x462 <main+0x12>
			}
			else if(aux == '6')
 4ca:	c6 33       	cpi	r28, 0x36	; 54
 4cc:	39 f4       	brne	.+14     	; 0x4dc <main+0x8c>
			{
				setReleEnable(6);
 4ce:	86 e0       	ldi	r24, 0x06	; 6
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	0e 94 d6 00 	call	0x1ac	; 0x1ac <setReleEnable>
				clearBUFFERrx();
 4d6:	0e 94 7c 00 	call	0xf8	; 0xf8 <clearBUFFERrx>
 4da:	c3 cf       	rjmp	.-122    	; 0x462 <main+0x12>
			}
			else if(aux == '7')
 4dc:	c7 33       	cpi	r28, 0x37	; 55
 4de:	39 f4       	brne	.+14     	; 0x4ee <main+0x9e>
			{
				setReleEnable(7);
 4e0:	87 e0       	ldi	r24, 0x07	; 7
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	0e 94 d6 00 	call	0x1ac	; 0x1ac <setReleEnable>
				clearBUFFERrx();
 4e8:	0e 94 7c 00 	call	0xf8	; 0xf8 <clearBUFFERrx>
 4ec:	ba cf       	rjmp	.-140    	; 0x462 <main+0x12>
			}
			else if(aux == '8')
 4ee:	c8 33       	cpi	r28, 0x38	; 56
 4f0:	39 f4       	brne	.+14     	; 0x500 <__stack+0x1>
			{
				setReleEnable(8);
 4f2:	88 e0       	ldi	r24, 0x08	; 8
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	0e 94 d6 00 	call	0x1ac	; 0x1ac <setReleEnable>
				clearBUFFERrx();
 4fa:	0e 94 7c 00 	call	0xf8	; 0xf8 <clearBUFFERrx>
 4fe:	b1 cf       	rjmp	.-158    	; 0x462 <main+0x12>
			}
			else if(aux == '9')
 500:	c9 33       	cpi	r28, 0x39	; 57
 502:	39 f4       	brne	.+14     	; 0x512 <__stack+0x13>
			{
				setReleEnable(9);
 504:	89 e0       	ldi	r24, 0x09	; 9
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	0e 94 d6 00 	call	0x1ac	; 0x1ac <setReleEnable>
				clearBUFFERrx();
 50c:	0e 94 7c 00 	call	0xf8	; 0xf8 <clearBUFFERrx>
 510:	a8 cf       	rjmp	.-176    	; 0x462 <main+0x12>
			}
			else if(aux == 'A')
 512:	c1 34       	cpi	r28, 0x41	; 65
 514:	39 f4       	brne	.+14     	; 0x524 <__stack+0x25>
			{
				setReleEnable(10);
 516:	8a e0       	ldi	r24, 0x0A	; 10
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <setReleEnable>
				clearBUFFERrx();
 51e:	0e 94 7c 00 	call	0xf8	; 0xf8 <clearBUFFERrx>
 522:	9f cf       	rjmp	.-194    	; 0x462 <main+0x12>
			}
			else if(aux == 'B')
 524:	c2 34       	cpi	r28, 0x42	; 66
 526:	39 f4       	brne	.+14     	; 0x536 <__stack+0x37>
			{
				setReleEnable(11);
 528:	8b e0       	ldi	r24, 0x0B	; 11
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	0e 94 d6 00 	call	0x1ac	; 0x1ac <setReleEnable>
				clearBUFFERrx();
 530:	0e 94 7c 00 	call	0xf8	; 0xf8 <clearBUFFERrx>
 534:	96 cf       	rjmp	.-212    	; 0x462 <main+0x12>
			}
			else if(aux == 'C')
 536:	c3 34       	cpi	r28, 0x43	; 67
 538:	39 f4       	brne	.+14     	; 0x548 <__stack+0x49>
			{
				setReleEnable(12);
 53a:	8c e0       	ldi	r24, 0x0C	; 12
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	0e 94 d6 00 	call	0x1ac	; 0x1ac <setReleEnable>
				clearBUFFERrx();
 542:	0e 94 7c 00 	call	0xf8	; 0xf8 <clearBUFFERrx>
 546:	8d cf       	rjmp	.-230    	; 0x462 <main+0x12>
			}
			else if(aux == 'D')
 548:	c4 34       	cpi	r28, 0x44	; 68
 54a:	39 f4       	brne	.+14     	; 0x55a <__stack+0x5b>
			{
				setReleEnable(13);
 54c:	8d e0       	ldi	r24, 0x0D	; 13
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	0e 94 d6 00 	call	0x1ac	; 0x1ac <setReleEnable>
				clearBUFFERrx();
 554:	0e 94 7c 00 	call	0xf8	; 0xf8 <clearBUFFERrx>
 558:	84 cf       	rjmp	.-248    	; 0x462 <main+0x12>
			}
			else if(aux == 'E')
 55a:	c5 34       	cpi	r28, 0x45	; 69
 55c:	39 f4       	brne	.+14     	; 0x56c <__stack+0x6d>
			{
				setReleEnable(14);
 55e:	8e e0       	ldi	r24, 0x0E	; 14
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	0e 94 d6 00 	call	0x1ac	; 0x1ac <setReleEnable>
				clearBUFFERrx();
 566:	0e 94 7c 00 	call	0xf8	; 0xf8 <clearBUFFERrx>
 56a:	7b cf       	rjmp	.-266    	; 0x462 <main+0x12>
			}
			else if(aux == 'F')
 56c:	c6 34       	cpi	r28, 0x46	; 70
 56e:	39 f4       	brne	.+14     	; 0x57e <__stack+0x7f>
			{
				setReleEnable(15);
 570:	8f e0       	ldi	r24, 0x0F	; 15
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	0e 94 d6 00 	call	0x1ac	; 0x1ac <setReleEnable>
				clearBUFFERrx();
 578:	0e 94 7c 00 	call	0xf8	; 0xf8 <clearBUFFERrx>
 57c:	72 cf       	rjmp	.-284    	; 0x462 <main+0x12>
			}
			else if(aux == 'G')
 57e:	c7 34       	cpi	r28, 0x47	; 71
 580:	39 f4       	brne	.+14     	; 0x590 <__stack+0x91>
			{
				setReleEnable(16);
 582:	80 e1       	ldi	r24, 0x10	; 16
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	0e 94 d6 00 	call	0x1ac	; 0x1ac <setReleEnable>
				clearBUFFERrx();
 58a:	0e 94 7c 00 	call	0xf8	; 0xf8 <clearBUFFERrx>
 58e:	69 cf       	rjmp	.-302    	; 0x462 <main+0x12>
			}
			else if(aux == 'H')
 590:	c8 34       	cpi	r28, 0x48	; 72
 592:	09 f0       	breq	.+2      	; 0x596 <__stack+0x97>
 594:	66 cf       	rjmp	.-308    	; 0x462 <main+0x12>
			{
				setReleEnable(17);
 596:	81 e1       	ldi	r24, 0x11	; 17
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <setReleEnable>
				clearBUFFERrx();
 59e:	0e 94 7c 00 	call	0xf8	; 0xf8 <clearBUFFERrx>
 5a2:	5f cf       	rjmp	.-322    	; 0x462 <main+0x12>

000005a4 <__vector_20>:
	
	if(UCSR0A & (1 << UDRE0)){ UDR0 = 0; } // Verifica se serial está livre para transmitir
}

ISR(USART_TX_vect)
{
 5a4:	1f 92       	push	r1
 5a6:	0f 92       	push	r0
 5a8:	0f b6       	in	r0, 0x3f	; 63
 5aa:	0f 92       	push	r0
 5ac:	11 24       	eor	r1, r1
 5ae:	8f 93       	push	r24
 5b0:	ef 93       	push	r30
 5b2:	ff 93       	push	r31
	if(serialReadPos != serialWritePos) // ainda com informações para enviar
 5b4:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <serialReadPos>
 5b8:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <serialWritePos>
 5bc:	e8 17       	cp	r30, r24
 5be:	79 f0       	breq	.+30     	; 0x5de <__vector_20+0x3a>
	{
		UDR0 = serialBUFFER[serialReadPos];
 5c0:	f0 e0       	ldi	r31, 0x00	; 0
 5c2:	e2 5e       	subi	r30, 0xE2	; 226
 5c4:	fe 4f       	sbci	r31, 0xFE	; 254
 5c6:	80 81       	ld	r24, Z
 5c8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fc0c6>
		serialReadPos++;
 5cc:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <serialReadPos>
 5d0:	8f 5f       	subi	r24, 0xFF	; 255
 5d2:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <serialReadPos>

		if (serialReadPos >= BUFFER_SIZE){ serialReadPos = 0; }
 5d6:	88 23       	and	r24, r24
 5d8:	14 f4       	brge	.+4      	; 0x5de <__vector_20+0x3a>
 5da:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <serialReadPos>
	}
}
 5de:	ff 91       	pop	r31
 5e0:	ef 91       	pop	r30
 5e2:	8f 91       	pop	r24
 5e4:	0f 90       	pop	r0
 5e6:	0f be       	out	0x3f, r0	; 63
 5e8:	0f 90       	pop	r0
 5ea:	1f 90       	pop	r1
 5ec:	18 95       	reti

000005ee <__vector_18>:

ISR(USART_RX_vect)
{
 5ee:	1f 92       	push	r1
 5f0:	0f 92       	push	r0
 5f2:	0f b6       	in	r0, 0x3f	; 63
 5f4:	0f 92       	push	r0
 5f6:	11 24       	eor	r1, r1
 5f8:	8f 93       	push	r24
 5fa:	9f 93       	push	r25
 5fc:	ef 93       	push	r30
 5fe:	ff 93       	push	r31
	serialBUFFERrx[serialReadPosRX] = UDR0;
 600:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
 604:	e8 2f       	mov	r30, r24
 606:	f0 e0       	ldi	r31, 0x00	; 0
 608:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fc0c6>
 60c:	e2 56       	subi	r30, 0x62	; 98
 60e:	fe 4f       	sbci	r31, 0xFE	; 254
 610:	90 83       	st	Z, r25
	serialReadPosRX++;
 612:	8f 5f       	subi	r24, 0xFF	; 255
 614:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>

	if(serialReadPosRX >= BUFFER_SIZE){ serialReadPosRX = 0; }
 618:	88 23       	and	r24, r24
 61a:	14 f4       	brge	.+4      	; 0x620 <__vector_18+0x32>
 61c:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <__data_end>

}
 620:	ff 91       	pop	r31
 622:	ef 91       	pop	r30
 624:	9f 91       	pop	r25
 626:	8f 91       	pop	r24
 628:	0f 90       	pop	r0
 62a:	0f be       	out	0x3f, r0	; 63
 62c:	0f 90       	pop	r0
 62e:	1f 90       	pop	r1
 630:	18 95       	reti

00000632 <__tablejump2__>:
 632:	ee 0f       	add	r30, r30
 634:	ff 1f       	adc	r31, r31
 636:	05 90       	lpm	r0, Z+
 638:	f4 91       	lpm	r31, Z
 63a:	e0 2d       	mov	r30, r0
 63c:	09 94       	ijmp

0000063e <_exit>:
 63e:	f8 94       	cli

00000640 <__stop_program>:
 640:	ff cf       	rjmp	.-2      	; 0x640 <__stop_program>
